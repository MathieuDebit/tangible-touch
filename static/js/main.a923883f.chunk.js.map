{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","canvas","useRef","useState","touches","setTouches","handleStart","event","preventDefault","context","current","getContext","changedTouches","console","log","i","length","color","colorForTouch","beginPath","lineWidth","arc","pageX","pageY","Math","PI","fillStyle","stroke","handleMove","clearRect","stokeStyle","handleEnd","handleCancel","touch","r","identifier","g","floor","b","toString","msg","p","document","getElementById","innerHTML","useEffect","canvasEl","addEventListener","removeEventListener","className","ref","width","window","innerWidth","height","innerHeight","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a923883f.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const canvas = useRef(null);\n\n  const [touches, setTouches] = useState([]);\n\n  useEffect(() => {\n    const canvasEl = canvas.current;\n\n    canvasEl.addEventListener('touchstart', handleStart, false);\n    canvasEl.addEventListener('touchend', handleEnd, false);\n    canvasEl.addEventListener('touchcancel', handleCancel, false);\n    canvasEl.addEventListener('touchmove', handleMove, false);\n\n    return () => {\n      canvasEl.removeEventListener('touchstart', handleStart);\n      canvasEl.removeEventListener('touchend', handleEnd);\n      canvasEl.removeEventListener('touchcancel', handleCancel);\n      canvasEl.removeEventListener('touchmove', handleMove);\n    };\n  });\n\n  function handleStart(event) {\n    event.preventDefault();\n\n    const context = canvas.current.getContext('2d');\n    const changedTouches = event.changedTouches;\n    setTouches(() => event.touches);\n    console.log('handleStart', event.touches);\n\n    for (let i = 0; i < changedTouches.length; i++) {\n      const color = colorForTouch(changedTouches[i]);\n      context.beginPath();\n      context.lineWidth = 5;\n      context.arc(changedTouches[i].pageX, changedTouches[i].pageY, 50, 0, 2 * Math.PI, false);\n      context.fillStyle = color;\n      context.stroke();\n      log('touchstart: ' + i);\n    }\n\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n\n    const context = canvas.current.getContext('2d');\n    const changedTouches = event.changedTouches;\n    setTouches(() => event.touches);\n\n    for (let i = 0; i < changedTouches.length; i++) {\n      const color = colorForTouch(changedTouches[i]);\n      context.beginPath();\n      context.clearRect(changedTouches[i].pageX - 100, touches[i].pageY - 100, 200, 200);\n      context.arc(changedTouches[i].pageX, changedTouches[i].pageY, 50, 0, 2 * Math.PI, false);\n      context.stokeStyle = color;\n      context.stroke();\n    }\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n\n    const context = canvas.current.getContext('2d');\n    const changedTouches = event.changedTouches;\n    setTouches(() => event.touches);\n    console.log('handleEnd', event.touches);\n\n    for (let i = 0; i < changedTouches.length; i++) {\n      log('touchend: ' + i);\n      // const color = colorForTouch(touches[i]);\n      context.clearRect(changedTouches[i].pageX - 55, changedTouches[i].pageY - 55, 110, 110);\n    }\n  }\n\n  function handleCancel(event) {\n    event.preventDefault();\n\n    log('touchcancel');\n\n    const changedTouches = event.changedTouches;\n    setTouches(() => event.touches);\n\n    for (let i = 0; i < changedTouches.length; i++) {\n    }\n  }\n\n  function colorForTouch(touch) {\n    let r = touch.identifier % 16;\n    let g = Math.floor(touch.identifier / 3) % 16;\n    let b = Math.floor(touch.identifier / 7) % 16;\n    r = r.toString(16);\n    g = g.toString(16);\n    b = b.toString(16);\n    const color = '#' + r + g + b;\n    // log('color for touch with identifier ' + touch.identifier + ': ' + color);\n    return color;\n  }\n\n  function log(msg) {\n    const p = document.getElementById('log');\n    p.innerHTML = msg + '<br>' + p.innerHTML;\n  }\n\n  return (\n    <div className=\"App\">\n      <canvas ref={canvas} width={window.innerWidth} height={window.innerHeight}>\n        Your browser does not support canvas element.\n      </canvas>\n      <br/>\n      <div className=\"box\">\n        <h1>{touches.length}</h1>\n        <pre id=\"log\">Ready</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}