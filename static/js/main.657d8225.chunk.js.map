{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ongoingTouches","handleStart","evt","preventDefault","console","log","ctx","document","getElementById","getContext","touches","changedTouches","i","length","push","copyTouch","color","colorForTouch","beginPath","lineWidth","arc","pageX","pageY","Math","PI","fillStyle","stroke","handleMove","idx","ongoingTouchIndexById","identifier","clearRect","splice","handleEnd","el","width","height","handleCancel","touch","r","g","floor","b","toString","idToFind","msg","innerHTML","App","useEffect","addEventListener","startup","className","id","window","innerWidth","innerHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.657d8225.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nfunction startup() {\n  var el = document.getElementById(\"canvas\");\n  el.addEventListener(\"touchstart\", handleStart, false);\n  el.addEventListener(\"touchend\", handleEnd, false);\n  el.addEventListener(\"touchcancel\", handleCancel, false);\n  el.addEventListener(\"touchmove\", handleMove, false);\n}\nvar ongoingTouches = [];\nfunction handleStart(evt) {\n  evt.preventDefault();\n  console.log(\"touchstart.\");\n  var el = document.getElementById(\"canvas\");\n  var ctx = el.getContext(\"2d\");\n  var touches = evt.changedTouches;\n\n  for (var i = 0; i < touches.length; i++) {\n    console.log(\"touchstart:\" + i + \"...\");\n    ongoingTouches.push(copyTouch(touches[i]));\n    var color = colorForTouch(touches[i]);\n    ctx.beginPath();\n    ctx.lineWidth = 5;\n    ctx.arc(touches[i].pageX, touches[i].pageY, 50, 0, 2 * Math.PI, false);  // a circle at the start\n    ctx.fillStyle = color;\n    ctx.stroke();\n    console.log(\"touchstart:\" + i + \".\");\n  }\n}\nfunction handleMove(evt) {\n  evt.preventDefault();\n  var el = document.getElementById(\"canvas\");\n  var ctx = el.getContext(\"2d\");\n  var touches = evt.changedTouches;\n\n  log('touches.length ' + touches.length);\n  for (var i = 0; i < touches.length; i++) {\n    var color = colorForTouch(touches[i]);\n    var idx = ongoingTouchIndexById(touches[i].identifier);\n\n    if (idx >= 0) {\n      console.log(\"continuing touch \"+idx);\n      ctx.beginPath();\n      ctx.clearRect(touches[i].pageX - 100, touches[i].pageY - 100, 200, 200);\n      ctx.arc(touches[i].pageX, touches[i].pageY, 50, 0, 2 * Math.PI, false);  // a circle at the start\n      ctx.stroke();\n\n      ongoingTouches.splice(idx, 1, copyTouch(touches[i]));  // swap in the new touch record\n      console.log(\".\");\n    } else {\n      console.log(\"can't figure out which touch to continue\");\n    }\n  }\n}\nfunction handleEnd(evt) {\n  evt.preventDefault();\n  log(\"touchend\");\n  var el = document.getElementById(\"canvas\");\n  var ctx = el.getContext(\"2d\");\n  var touches = evt.changedTouches;\n\n  for (var i = 0; i < touches.length; i++) {\n    var color = colorForTouch(touches[i]);\n    var idx = ongoingTouchIndexById(touches[i].identifier);\n\n    if (idx >= 0) {\n      ctx.clearRect(0, 0, el.width, el.height);\n      ongoingTouches.splice(idx, 1);  // remove it; we're done\n    } else {\n      console.log(\"can't figure out which touch to end\");\n    }\n  }\n}\nfunction handleCancel(evt) {\n  evt.preventDefault();\n  console.log(\"touchcancel.\");\n  var touches = evt.changedTouches;\n\n  for (var i = 0; i < touches.length; i++) {\n    var idx = ongoingTouchIndexById(touches[i].identifier);\n    ongoingTouches.splice(idx, 1);  // remove it; we're done\n  }\n}\nfunction colorForTouch(touch) {\n  var r = touch.identifier % 16;\n  var g = Math.floor(touch.identifier / 3) % 16;\n  var b = Math.floor(touch.identifier / 7) % 16;\n  r = r.toString(16); // make it a hex digit\n  g = g.toString(16); // make it a hex digit\n  b = b.toString(16); // make it a hex digit\n  var color = \"#\" + r + g + b;\n  console.log(\"color for touch with identifier \" + touch.identifier + \" = \" + color);\n  return color;\n}\nfunction copyTouch({ identifier, pageX, pageY }) {\n  return { identifier, pageX, pageY };\n} function ongoingTouchIndexById(idToFind) {\n  for (var i = 0; i < ongoingTouches.length; i++) {\n    var id = ongoingTouches[i].identifier;\n\n    if (id == idToFind) {\n      return i;\n    }\n  }\n  return -1;    // not found\n}\nfunction log(msg) {\n  var p = document.getElementById('log');\n  p.innerHTML = msg;\n}\n\nfunction App() {\n  useEffect(() => {\n    startup();\n  });\n\n  return (\n    <div className=\"App\">\n      <canvas id=\"canvas\" width={window.innerWidth} height={window.innerHeight}>\n        Your browser does not support canvas element.\n      </canvas>\n      <br/>\n      <pre id=\"log\">Ready</pre>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}